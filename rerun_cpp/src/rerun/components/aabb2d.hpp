// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/components/aabb2d.fbs".

#pragma once

#include "../datatypes/aabb2d.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::components {
    /// **Component**: An Axis-Aligned Bounding Box in 2D space.
    struct AABB2D {
        rerun::datatypes::AABB2D vector;

      public:
        AABB2D() = default;

        AABB2D(rerun::datatypes::AABB2D vector_) : vector(vector_) {}

        AABB2D& operator=(rerun::datatypes::AABB2D vector_) {
            vector = vector_;
            return *this;
        }

        /// Cast to the underlying AABB2D datatype
        operator rerun::datatypes::AABB2D() const {
            return vector;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::AABB2D) == sizeof(components::AABB2D));

    /// \private
    template <>
    struct Loggable<components::AABB2D> {
        static constexpr const char Name[] = "rerun.components.AABB2D";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::AABB2D>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::AABB2D` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::AABB2D* instances, size_t num_instances
        ) {
            return Loggable<rerun::datatypes::AABB2D>::to_arrow(&instances->vector, num_instances);
        }
    };
} // namespace rerun
