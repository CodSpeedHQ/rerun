// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/out_of_tree_transform.fbs".

#pragma once

#include "../datatypes/bool.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::components {
    /// **Component**: If out of tree transform is enabled, a transform does not participate in the transform hierarchy.
    ///
    /// This means transforms on this entity do not affect children.
    /// It will however, still be affected by transforms on its parents.
    ///
    /// This is automatically enabled if any of the transform components are present multiple times.
    /// Setting this to false for a transform that has multiple instances of the same transform component,
    /// will result in an error.
    struct OutOfTreeTransform {
        /// Whether the out of tree transform mode is enabled.
        rerun::datatypes::Bool enabled;

      public:
        OutOfTreeTransform() = default;

        OutOfTreeTransform(rerun::datatypes::Bool enabled_) : enabled(enabled_) {}

        OutOfTreeTransform& operator=(rerun::datatypes::Bool enabled_) {
            enabled = enabled_;
            return *this;
        }

        OutOfTreeTransform(bool value_) : enabled(value_) {}

        OutOfTreeTransform& operator=(bool value_) {
            enabled = value_;
            return *this;
        }

        /// Cast to the underlying Bool datatype
        operator rerun::datatypes::Bool() const {
            return enabled;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::Bool) == sizeof(components::OutOfTreeTransform));

    /// \private
    template <>
    struct Loggable<components::OutOfTreeTransform> {
        static constexpr const char Name[] = "rerun.components.OutOfTreeTransform";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Bool>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::OutOfTreeTransform` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::OutOfTreeTransform* instances, size_t num_instances
        ) {
            return Loggable<rerun::datatypes::Bool>::to_arrow(&instances->enabled, num_instances);
        }
    };
} // namespace rerun
