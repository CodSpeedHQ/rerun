// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/solid_color.fbs".

#pragma once

#include "../datatypes/rgba32.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::components {
    /// **Component**: An RGBA color for the surface of an object.
    ///
    /// In representation and color space, this is identical to `components::Color`.
    /// Unlike that component, it is used specifically to request that this color should be
    /// applied to the entire surface of the object (as opposed to the lines of a wireframe).
    struct SolidColor {
        rerun::datatypes::Rgba32 rgba;

      public:
        // Extensions to generated type defined in 'solid_color_ext.cpp'

        /// Construct SolidColor from unmultiplied RGBA values.
        SolidColor(uint8_t r, uint8_t g, uint8_t b, uint8_t a = 255) : rgba(r, g, b, a) {}

        uint8_t r() const {
            return rgba.r();
        }

        uint8_t g() const {
            return rgba.g();
        }

        uint8_t b() const {
            return rgba.b();
        }

        uint8_t a() const {
            return rgba.a();
        }

      public:
        SolidColor() = default;

        SolidColor(rerun::datatypes::Rgba32 rgba_) : rgba(rgba_) {}

        SolidColor& operator=(rerun::datatypes::Rgba32 rgba_) {
            rgba = rgba_;
            return *this;
        }

        SolidColor(uint32_t rgba_) : rgba(rgba_) {}

        SolidColor& operator=(uint32_t rgba_) {
            rgba = rgba_;
            return *this;
        }

        /// Cast to the underlying Rgba32 datatype
        operator rerun::datatypes::Rgba32() const {
            return rgba;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::Rgba32) == sizeof(components::SolidColor));

    /// \private
    template <>
    struct Loggable<components::SolidColor> {
        static constexpr const char Name[] = "rerun.components.SolidColor";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Rgba32>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::SolidColor` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::SolidColor* instances, size_t num_instances
        ) {
            return Loggable<rerun::datatypes::Rgba32>::to_arrow(&instances->rgba, num_instances);
        }
    };
} // namespace rerun
