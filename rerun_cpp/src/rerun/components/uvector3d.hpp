// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/components/uvector3d.fbs".

#pragma once

#include "../datatypes/uvec3d.hpp"
#include "../result.hpp"

#include <array>
#include <cstdint>
#include <memory>

namespace rerun::components {
    /// **Component**: A uint32 vector in 3D space.
    struct UVector3D {
        rerun::datatypes::UVec3D vector;

      public:
        // Extensions to generated type defined in 'uvector3d_ext.cpp'

        /// Construct UVector3D from x/y/z values.
        UVector3D(uint32_t x, uint32_t y, uint32_t z) : vector{x, y, z} {}

        /// Construct UVec3D from x/y/z uint32_t pointer.
        explicit UVector3D(const uint32_t* xyz) : vector{xyz[0], xyz[1], xyz[2]} {}

        uint32_t x() const {
            return vector.x();
        }

        uint32_t y() const {
            return vector.y();
        }

        uint32_t z() const {
            return vector.z();
        }

      public:
        UVector3D() = default;

        UVector3D(rerun::datatypes::UVec3D vector_) : vector(vector_) {}

        UVector3D& operator=(rerun::datatypes::UVec3D vector_) {
            vector = vector_;
            return *this;
        }

        UVector3D(std::array<uint32_t, 3> xyz_) : vector(xyz_) {}

        UVector3D& operator=(std::array<uint32_t, 3> xyz_) {
            vector = xyz_;
            return *this;
        }

        /// Cast to the underlying UVec3D datatype
        operator rerun::datatypes::UVec3D() const {
            return vector;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::UVec3D) == sizeof(components::UVector3D));

    /// \private
    template <>
    struct Loggable<components::UVector3D> {
        static constexpr const char Name[] = "rerun.components.UVector3D";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::UVec3D>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::UVector3D` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::UVector3D* instances, size_t num_instances
        ) {
            return Loggable<rerun::datatypes::UVec3D>::to_arrow(&instances->vector, num_instances);
        }
    };
} // namespace rerun
