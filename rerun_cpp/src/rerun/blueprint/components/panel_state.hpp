// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/components/panel_state.fbs".

#pragma once

#include "../../datatypes/panel_state.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::blueprint::components {
    /// **Component**: Panel state
    struct PanelState {
        /// Panel state
        rerun::datatypes::PanelState state;

      public:
        PanelState() = default;

        PanelState(rerun::datatypes::PanelState state_) : state(state_) {}

        PanelState& operator=(rerun::datatypes::PanelState state_) {
            state = state_;
            return *this;
        }

        /// Cast to the underlying PanelState datatype
        operator rerun::datatypes::PanelState() const {
            return state;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    static_assert(
        sizeof(rerun::datatypes::PanelState) == sizeof(blueprint::components::PanelState)
    );

    /// \private
    template <>
    struct Loggable<blueprint::components::PanelState> {
        static constexpr const char Name[] = "rerun.blueprint.components.PanelState";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::PanelState>::arrow_datatype();
        }

        /// Serializes an array of `rerun::blueprint:: components::PanelState` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::PanelState* instances, size_t num_instances
        ) {
            return Loggable<rerun::datatypes::PanelState>::to_arrow(
                &instances->state,
                num_instances
            );
        }
    };
} // namespace rerun
