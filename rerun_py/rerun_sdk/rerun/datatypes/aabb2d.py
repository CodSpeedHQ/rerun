# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/datatypes/aabb2d.fbs".

# You can extend this class by creating a "AABB2DExt" class in "aabb2d_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .._baseclasses import BaseBatch, BaseExtensionType
from .._converters import (
    to_np_float64,
)

__all__ = ["AABB2D", "AABB2DArrayLike", "AABB2DBatch", "AABB2DLike", "AABB2DType"]


@define(init=False)
class AABB2D:
    """**Datatype**: An Axis-Aligned Bounding Box in 2D space, implemented as the minimum and maximum corners."""

    def __init__(self: Any, min: npt.ArrayLike, max: npt.ArrayLike):
        """
        Create a new instance of the AABB2D datatype.

        Parameters
        ----------
        min:
            The minimum bounds; usually left-top corner.
        max:
            The maximum bounds; usually right-bottom corner.

        """

        # You can define your own __init__ function as a member of AABB2DExt in aabb2d_ext.py
        self.__attrs_init__(min=min, max=max)

    min: npt.NDArray[np.float64] = field(converter=to_np_float64)
    # The minimum bounds; usually left-top corner.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    max: npt.NDArray[np.float64] = field(converter=to_np_float64)
    # The maximum bounds; usually right-bottom corner.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


AABB2DLike = AABB2D
AABB2DArrayLike = Union[
    AABB2D,
    Sequence[AABB2DLike],
]


class AABB2DType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.AABB2D"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct([
                pa.field(
                    "min",
                    pa.list_(pa.field("item", pa.float64(), nullable=False, metadata={}), 2),
                    nullable=False,
                    metadata={},
                ),
                pa.field(
                    "max",
                    pa.list_(pa.field("item", pa.float64(), nullable=False, metadata={}), 2),
                    nullable=False,
                    metadata={},
                ),
            ]),
            self._TYPE_NAME,
        )


class AABB2DBatch(BaseBatch[AABB2DArrayLike]):
    _ARROW_TYPE = AABB2DType()

    @staticmethod
    def _native_to_pa_array(data: AABB2DArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError  # You need to implement native_to_pa_array_override in aabb2d_ext.py
