# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/datatypes/visible_time_range.fbs".

# You can extend this class by creating a "TimeRangeBoundaryExt" class in "time_range_boundary_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import BaseBatch, BaseExtensionType

__all__ = [
    "TimeRangeBoundary",
    "TimeRangeBoundaryArrayLike",
    "TimeRangeBoundaryBatch",
    "TimeRangeBoundaryLike",
    "TimeRangeBoundaryType",
]


def _time_range_boundary__time__special_field_converter_override(x: datatypes.TimeIntLike) -> datatypes.TimeInt:
    if isinstance(x, datatypes.TimeInt):
        return x
    else:
        return datatypes.TimeInt(x)


@define(init=False)
class TimeRangeBoundary:
    """**Datatype**: Type of boundary for visible history."""

    def __init__(self: Any, kind: datatypes.TimeRangeBoundaryKindLike, time: datatypes.TimeIntLike):
        """
        Create a new instance of the TimeRangeBoundary datatype.

        Parameters
        ----------
        kind:
            Type of the boundary.
        time:
            Value of the boundary (ignored for `Infinite` type).

        """

        # You can define your own __init__ function as a member of TimeRangeBoundaryExt in time_range_boundary_ext.py
        self.__attrs_init__(kind=kind, time=time)

    kind: datatypes.TimeRangeBoundaryKind = field()
    # Type of the boundary.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    time: datatypes.TimeInt = field(converter=_time_range_boundary__time__special_field_converter_override)
    # Value of the boundary (ignored for `Infinite` type).
    #
    # (Docstring intentionally commented out to hide this field from the docs)


TimeRangeBoundaryLike = TimeRangeBoundary
TimeRangeBoundaryArrayLike = Union[
    TimeRangeBoundary,
    Sequence[TimeRangeBoundaryLike],
]


class TimeRangeBoundaryType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.TimeRangeBoundary"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct([
                pa.field(
                    "kind",
                    pa.sparse_union([
                        pa.field("_null_markers", pa.null(), nullable=True, metadata={}),
                        pa.field("RelativeToTimeCursor", pa.null(), nullable=True, metadata={}),
                        pa.field("Absolute", pa.null(), nullable=True, metadata={}),
                        pa.field("Infinite", pa.null(), nullable=True, metadata={}),
                    ]),
                    nullable=False,
                    metadata={},
                ),
                pa.field("time", pa.int64(), nullable=False, metadata={}),
            ]),
            self._TYPE_NAME,
        )


class TimeRangeBoundaryBatch(BaseBatch[TimeRangeBoundaryArrayLike]):
    _ARROW_TYPE = TimeRangeBoundaryType()

    @staticmethod
    def _native_to_pa_array(data: TimeRangeBoundaryArrayLike, data_type: pa.DataType) -> pa.Array:
        from rerun.datatypes import TimeIntBatch, TimeRangeBoundaryKindBatch

        if isinstance(data, TimeRangeBoundary):
            data = [data]

        return pa.StructArray.from_arrays(
            [
                TimeRangeBoundaryKindBatch([x.kind for x in data]).as_arrow_array().storage,
                TimeIntBatch([x.time for x in data]).as_arrow_array().storage,
            ],
            fields=list(data_type),
        )
