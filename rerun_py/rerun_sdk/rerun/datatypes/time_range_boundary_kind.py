# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/datatypes/visible_time_range.fbs".

# You can extend this class by creating a "TimeRangeBoundaryKindExt" class in "time_range_boundary_kind_ext.py".

from __future__ import annotations

from typing import Sequence, Union

import pyarrow as pa

from .._baseclasses import BaseBatch, BaseExtensionType

__all__ = [
    "TimeRangeBoundaryKind",
    "TimeRangeBoundaryKindArrayLike",
    "TimeRangeBoundaryKindBatch",
    "TimeRangeBoundaryKindLike",
    "TimeRangeBoundaryKindType",
]


from enum import Enum


class TimeRangeBoundaryKind(Enum):
    """**Datatype**: Kind of boundary for visible history, see `TimeRangeBoundary`."""

    RelativeToTimeCursor = 1
    """Boundary is a value relative to the time cursor."""

    Absolute = 2
    """Boundary is an absolute value."""

    Infinite = 3
    """The boundary extends to infinity."""


TimeRangeBoundaryKindLike = Union[TimeRangeBoundaryKind, str]
TimeRangeBoundaryKindArrayLike = Union[TimeRangeBoundaryKindLike, Sequence[TimeRangeBoundaryKindLike]]


class TimeRangeBoundaryKindType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.TimeRangeBoundaryKind"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.sparse_union([
                pa.field("_null_markers", pa.null(), nullable=True, metadata={}),
                pa.field("RelativeToTimeCursor", pa.null(), nullable=True, metadata={}),
                pa.field("Absolute", pa.null(), nullable=True, metadata={}),
                pa.field("Infinite", pa.null(), nullable=True, metadata={}),
            ]),
            self._TYPE_NAME,
        )


class TimeRangeBoundaryKindBatch(BaseBatch[TimeRangeBoundaryKindArrayLike]):
    _ARROW_TYPE = TimeRangeBoundaryKindType()

    @staticmethod
    def _native_to_pa_array(data: TimeRangeBoundaryKindArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (TimeRangeBoundaryKind, int, str)):
            data = [data]

        types: list[int] = []

        for value in data:
            if value is None:
                types.append(0)
            elif isinstance(value, TimeRangeBoundaryKind):
                types.append(value.value)  # Actual enum value
            elif isinstance(value, int):
                types.append(value)  # By number
            elif isinstance(value, str):
                if hasattr(TimeRangeBoundaryKind, value):
                    types.append(TimeRangeBoundaryKind[value].value)  # fast path
                elif value.lower() == "relativetotimecursor":
                    types.append(TimeRangeBoundaryKind.RelativeToTimeCursor.value)
                elif value.lower() == "absolute":
                    types.append(TimeRangeBoundaryKind.Absolute.value)
                elif value.lower() == "infinite":
                    types.append(TimeRangeBoundaryKind.Infinite.value)
                else:
                    raise ValueError(f"Unknown TimeRangeBoundaryKind kind: {value}")
            else:
                raise ValueError(f"Unknown TimeRangeBoundaryKind kind: {value}")

        buffers = [
            None,
            pa.array(types, type=pa.int8()).buffers()[1],
        ]
        children = (1 + 3) * [pa.nulls(len(data))]

        return pa.UnionArray.from_buffers(
            type=data_type,
            length=len(data),
            buffers=buffers,
            children=children,
        )
