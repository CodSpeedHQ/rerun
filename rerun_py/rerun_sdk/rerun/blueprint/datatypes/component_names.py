# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/datatypes/component_names.fbs".

# You can extend this class by creating a "ComponentNamesExt" class in "component_names_ext.py".

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from ..._baseclasses import (
    BaseBatch,
    BaseExtensionType,
)

__all__ = [
    "ComponentNames",
    "ComponentNamesArrayLike",
    "ComponentNamesBatch",
    "ComponentNamesLike",
    "ComponentNamesType",
]


@define(init=False)
class ComponentNames:
    """**Datatype**: A list of component names, encoded as UTF-8."""

    def __init__(self: Any, value: ComponentNamesLike):
        """Create a new instance of the ComponentNames datatype."""

        # You can define your own __init__ function as a member of ComponentNamesExt in component_names_ext.py
        self.__attrs_init__(value=value)

    value: list[str] = field()


if TYPE_CHECKING:
    ComponentNamesLike = Union[ComponentNames, Sequence[str]]
else:
    ComponentNamesLike = Any

ComponentNamesArrayLike = Union[
    ComponentNames,
    Sequence[ComponentNamesLike],
]


class ComponentNamesType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.datatypes.ComponentNames"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self, pa.list_(pa.field("item", pa.utf8(), nullable=False, metadata={})), self._TYPE_NAME
        )


class ComponentNamesBatch(BaseBatch[ComponentNamesArrayLike]):
    _ARROW_TYPE = ComponentNamesType()

    @staticmethod
    def _native_to_pa_array(data: ComponentNamesArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError(
            "Arrow serialization of ComponentNames not implemented: We lack codegen for arrow-serialization of general structs"
        )  # You need to implement native_to_pa_array_override in component_names_ext.py
