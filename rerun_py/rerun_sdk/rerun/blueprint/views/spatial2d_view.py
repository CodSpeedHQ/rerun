# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/blueprint/views/spatial2d.fbs".

from __future__ import annotations

from typing import Sequence

__all__ = ["Spatial2DView"]


from ... import datatypes
from ..._baseclasses import AsComponents
from ...datatypes import EntityPathLike, Utf8Like
from .. import archetypes as blueprint_archetypes
from .. import components as blueprint_components
from ..api import SpaceView, SpaceViewContentsLike


class Spatial2DView(SpaceView):
    """
    **View**: A Spatial 2D view.

    Example
    -------
    ### Use a blueprint to customize a Spatial2DView.:
    ```python
    import rerun as rr
    import rerun.blueprint as rrb
    from numpy.random import default_rng

    rr.init("rerun_example_spatial_2d", spawn=True)

    # Create some random points.
    rng = default_rng(12345)
    positions = rng.uniform(-10, 10, size=[50, 2])
    colors = rng.uniform(0, 255, size=[50, 3])
    radii = rng.uniform(0.25, 0.5, size=[50])

    rr.log("points", rr.Points2D(positions, colors=colors, radii=radii))

    # Create a Spatial2D view to display the points.
    blueprint = rrb.Blueprint(
        rrb.Spatial2DView(
            origin="/points",
            name="2D Points",
            # Set the background color to light blue.
            background=[100, 149, 237],
            # Note that this range is smaller than the range of the points,
            # so some points will not be visible.
            visual_bounds=rrb.VisualBounds(x_range=[-5, 5], y_range=[-5, 5]),
        ),
        collapse_panels=True,
    )

    rr.send_blueprint(blueprint)
    ```
    <center>
    <picture>
      <source media="(max-width: 480px)" srcset="https://static.rerun.io/spatial2d_view/71cee4d17d570d42e0d2be56d3e074d1f60f044c/480w.png">
      <source media="(max-width: 768px)" srcset="https://static.rerun.io/spatial2d_view/71cee4d17d570d42e0d2be56d3e074d1f60f044c/768w.png">
      <source media="(max-width: 1024px)" srcset="https://static.rerun.io/spatial2d_view/71cee4d17d570d42e0d2be56d3e074d1f60f044c/1024w.png">
      <source media="(max-width: 1200px)" srcset="https://static.rerun.io/spatial2d_view/71cee4d17d570d42e0d2be56d3e074d1f60f044c/1200w.png">
      <img src="https://static.rerun.io/spatial2d_view/71cee4d17d570d42e0d2be56d3e074d1f60f044c/full.png" width="640">
    </picture>
    </center>

    """

    def __init__(
        self,
        *,
        origin: EntityPathLike = "/",
        contents: SpaceViewContentsLike = "$origin/**",
        name: Utf8Like | None = None,
        visible: blueprint_components.VisibleLike | None = None,
        background: blueprint_archetypes.Background
        | datatypes.Rgba32Like
        | blueprint_components.BackgroundKindLike
        | None = None,
        visual_bounds: blueprint_archetypes.VisualBounds | None = None,
        time_ranges: blueprint_archetypes.VisibleTimeRanges
        | datatypes.VisibleTimeRangeLike
        | Sequence[datatypes.VisibleTimeRangeLike]
        | None = None,
    ) -> None:
        """
        Construct a blueprint for a new Spatial2DView view.

        Parameters
        ----------
        origin:
            The `EntityPath` to use as the origin of this view.
            All other entities will be transformed to be displayed relative to this origin.
        contents:
            The contents of the view specified as a query expression.
            This is either a single expression, or a list of multiple expressions.
            See [rerun.blueprint.archetypes.SpaceViewContents][].
        name:
            The display name of the view.
        visible:
            Whether this view is visible.

            Defaults to true if not specified.
        background:
            Configuration for the background of the space view.
        visual_bounds:
            The visible parts of the scene, in the coordinate space of the scene.

            Everything within these bounds are guaranteed to be visible.
            Somethings outside of these bounds may also be visible due to letterboxing.
        time_ranges:
            Configures which range on each timeline is shown by this view (unless specified differently per entity).

            If not specified, the default is to show the latest state of each component.
            If a timeline is specified more than once, the first entry will be used.

        """

        properties: dict[str, AsComponents] = {}
        if background is not None:
            if not isinstance(background, blueprint_archetypes.Background):
                background = blueprint_archetypes.Background(background)
            properties["Background"] = background

        if visual_bounds is not None:
            if not isinstance(visual_bounds, blueprint_archetypes.VisualBounds):
                visual_bounds = blueprint_archetypes.VisualBounds(visual_bounds)
            properties["VisualBounds"] = visual_bounds

        if time_ranges is not None:
            if not isinstance(time_ranges, blueprint_archetypes.VisibleTimeRanges):
                time_ranges = blueprint_archetypes.VisibleTimeRanges(time_ranges)
            properties["VisibleTimeRanges"] = time_ranges

        super().__init__(
            class_identifier="2D", origin=origin, contents=contents, name=name, visible=visible, properties=properties
        )
