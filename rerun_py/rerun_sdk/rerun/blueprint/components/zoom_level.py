# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/blueprint/components/zoom_level.fbs".

# You can extend this class by creating a "ZoomLevelExt" class in "zoom_level_ext.py".

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from ..._baseclasses import (
    BaseBatch,
    BaseExtensionType,
    ComponentBatchMixin,
    ComponentMixin,
)

__all__ = ["ZoomLevel", "ZoomLevelArrayLike", "ZoomLevelBatch", "ZoomLevelLike", "ZoomLevelType"]


@define(init=False)
class ZoomLevel(ComponentMixin):
    """**Component**: A zoom level determines how much of the world is visible on a map."""

    _BATCH_TYPE = None

    def __init__(self: Any, zoom: ZoomLevelLike):
        """
        Create a new instance of the ZoomLevel component.

        Parameters
        ----------
        zoom:
            Zoom level: 0 being the lowest zoom level (fully zoomed out) and 22 being the highest (fully zoomed in).

        """

        # You can define your own __init__ function as a member of ZoomLevelExt in zoom_level_ext.py
        self.__attrs_init__(zoom=zoom)

    zoom: float = field(converter=float)
    # Zoom level: 0 being the lowest zoom level (fully zoomed out) and 22 being the highest (fully zoomed in).
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    def __array__(self, dtype: npt.DTypeLike = None) -> npt.NDArray[Any]:
        # You can define your own __array__ function as a member of ZoomLevelExt in zoom_level_ext.py
        return np.asarray(self.zoom, dtype=dtype)

    def __float__(self) -> float:
        return float(self.zoom)

    def __hash__(self) -> int:
        return hash(self.zoom)


if TYPE_CHECKING:
    ZoomLevelLike = Union[ZoomLevel, float]
else:
    ZoomLevelLike = Any

ZoomLevelArrayLike = Union[ZoomLevel, Sequence[ZoomLevelLike], npt.ArrayLike]


class ZoomLevelType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.components.ZoomLevel"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.float32(), self._TYPE_NAME)


class ZoomLevelBatch(BaseBatch[ZoomLevelArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = ZoomLevelType()

    @staticmethod
    def _native_to_pa_array(data: ZoomLevelArrayLike, data_type: pa.DataType) -> pa.Array:
        array = np.asarray(data, dtype=np.float32).flatten()
        return pa.array(array, type=data_type)


# This is patched in late to avoid circular dependencies.
ZoomLevel._BATCH_TYPE = ZoomLevelBatch  # type: ignore[assignment]
