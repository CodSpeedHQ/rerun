# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/archetypes/leaf_transforms3d.fbs".

# You can extend this class by creating a "LeafTransforms3DExt" class in "leaf_transforms3d_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define, field

from .. import components, datatypes
from .._baseclasses import (
    Archetype,
)
from ..error_utils import catch_and_log_exceptions

__all__ = ["LeafTransforms3D"]


@define(str=False, repr=False, init=False)
class LeafTransforms3D(Archetype):
    """
    **Archetype**: One or more transforms between the parent and the current entity which are *not* propagated in the transform hierarchy.

    For transforms that are propagated in the transform hierarchy, see [`archetypes.Transform3D`].

    From the point of view of the entity's coordinate system,
    all components are applied in the inverse order they are listed here.
    E.g. if both a translation and a max3x3 transform are present,
    the 3x3 matrix is applied first, followed by the translation.
    """

    def __init__(
        self: Any,
        *,
        translation: datatypes.Vec3DArrayLike | None = None,
        rotation_axis_angle: datatypes.RotationAxisAngleArrayLike | None = None,
        quaternion: datatypes.QuaternionArrayLike | None = None,
        scale: datatypes.Vec3DArrayLike | None = None,
        mat3x3: datatypes.Mat3x3ArrayLike | None = None,
    ):
        """
        Create a new instance of the LeafTransforms3D archetype.

        Parameters
        ----------
        translation:
            Translation vectors.
        rotation_axis_angle:
            Rotations via axis + angle.
        quaternion:
            Rotations via quaternion.
        scale:
            Scaling factor.
        mat3x3:
            3x3 transformation matrix.

        """

        # You can define your own __init__ function as a member of LeafTransforms3DExt in leaf_transforms3d_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(
                translation=translation,
                rotation_axis_angle=rotation_axis_angle,
                quaternion=quaternion,
                scale=scale,
                mat3x3=mat3x3,
            )
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            translation=None,  # type: ignore[arg-type]
            rotation_axis_angle=None,  # type: ignore[arg-type]
            quaternion=None,  # type: ignore[arg-type]
            scale=None,  # type: ignore[arg-type]
            mat3x3=None,  # type: ignore[arg-type]
        )

    @classmethod
    def _clear(cls) -> LeafTransforms3D:
        """Produce an empty LeafTransforms3D, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    translation: components.LeafTranslation3DBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.LeafTranslation3DBatch._optional,  # type: ignore[misc]
    )
    # Translation vectors.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    rotation_axis_angle: components.LeafRotationAxisAngleBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.LeafRotationAxisAngleBatch._optional,  # type: ignore[misc]
    )
    # Rotations via axis + angle.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    quaternion: components.LeafRotationQuatBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.LeafRotationQuatBatch._optional,  # type: ignore[misc]
    )
    # Rotations via quaternion.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    scale: components.LeafScale3DBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.LeafScale3DBatch._optional,  # type: ignore[misc]
    )
    # Scaling factor.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    mat3x3: components.LeafTransformMat3x3Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.LeafTransformMat3x3Batch._optional,  # type: ignore[misc]
    )
    # 3x3 transformation matrix.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
